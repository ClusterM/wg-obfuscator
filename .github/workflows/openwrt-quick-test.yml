name: OpenWRT Quick Test

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target to test (leave empty for all)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - 'x86_64'
          - 'mips_24kc'
          - 'arm_cortex-a7_neon-vfpv4'
          - 'aarch64_cortex-a72'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  OPENWRT_VERSION: "23.05.3"

jobs:
  quick-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        target:
          - [x86_64, x86_64, generic, Generic]
          - [mips_24kc, mips, 24kc, generic]
          - [arm_cortex-a7_neon-vfpv4, arm_cortex-a7, neon-vfpv4, generic]
          - [aarch64_cortex-a72, aarch64, cortex-a72, generic]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libncurses5-dev \
            zlib1g-dev \
            gawk \
            git \
            gettext \
            libssl-dev \
            xsltproc \
            wget \
            unzip \
            python3 \
            python3-distutils

      - name: Download OpenWRT SDK
        run: |
          TARGET_NAME="${{ matrix.target[0] }}"
          ARCH="${{ matrix.target[1] }}"
          SUBTARGET="${{ matrix.target[2] }}"
          
          SDK_URL="https://downloads.openwrt.org/releases/${OPENWRT_VERSION}/targets/${ARCH}/${SUBTARGET}/openwrt-sdk-${OPENWRT_VERSION}-${ARCH}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          
          echo "Downloading OpenWRT SDK for ${TARGET_NAME}..."
          wget -q "${SDK_URL}" -O openwrt-sdk.tar.xz
          tar -xf openwrt-sdk.tar.xz
          
          SDK_DIR=$(find . -maxdepth 1 -name "openwrt-sdk-*" -type d | head -1)
          echo "SDK_DIR=${SDK_DIR}" >> $GITHUB_ENV

      - name: Prepare and build package
        run: |
          # Copy package files
          mkdir -p "${SDK_DIR}/package/network/wg-obfuscator"
          cp -r openwrt/* "${SDK_DIR}/package/network/wg-obfuscator/"
          cp *.c *.h Makefile LICENSE README.md "${SDK_DIR}/package/network/wg-obfuscator/files/"
          
          # Create source Makefile
          cat > "${SDK_DIR}/package/network/wg-obfuscator/files/Makefile" << 'EOF'
          PROG_NAME    = wg-obfuscator
          CONFIG       = wg-obfuscator.conf
          SERVICE_FILE = wg-obfuscator.service
          HEADERS      = wg-obfuscator.h obfuscation.h config.h uthash.h mini_argp.h masking.h masking_stun.h
          
          RELEASE ?= 1
          
          RM    = rm -f
          CC    = gcc
          CFLAGS   = -O2 -Wall
          LDFLAGS += -s
          OBJS = wg-obfuscator.o config.o masking.o masking_stun.o
          EXEDIR = .
          
          EXTRA_CFLAGS =
          
          TARGET = $(EXEDIR)/$(PROG_NAME)
          
          all: $(TARGET)
          
          clean:
          	$(RM) *.o
          	$(RM) $(TARGET)
          
          $(OBJS): 
          
          %.o : %.c $(HEADERS)
          	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -o $@ -c $<
          
          $(TARGET): $(OBJS)
          	$(CC) -o $(TARGET) $(OBJS) $(LDFLAGS)
          
          .PHONY: clean
          EOF
          
          # Configure and build
          cd "${SDK_DIR}"
          make defconfig
          echo "CONFIG_PACKAGE_wg-obfuscator=y" >> .config
          make defconfig
          make package/wg-obfuscator/compile V=s

      - name: Verify build
        run: |
          cd "${SDK_DIR}"
          
          if [ -f "bin/packages/*/network/wg-obfuscator_*.ipk" ]; then
            echo "✅ Build successful for ${{ matrix.target[0] }}"
            ls -la bin/packages/*/network/wg-obfuscator_*.ipk
          else
            echo "❌ Build failed for ${{ matrix.target[0] }}"
            exit 1
          fi