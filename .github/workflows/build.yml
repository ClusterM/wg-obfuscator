name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  IMAGE_NAME: wg-obfuscator

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:

  build-docker:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/arm/v7, linux/arm/v6, linux/arm/v5, linux/386, linux/ppc64le, linux/s390x]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare filename and tag
        id: prep
        run: |
          SAFE_PLATFORM="${{ matrix.platform }}"
          SAFE_PLATFORM=$(echo "$SAFE_PLATFORM" | sed 's|linux/||;s|/|-|g')
          echo "safe_platform=$SAFE_PLATFORM" >> $GITHUB_OUTPUT

      - name: Build per-arch image and export as tar
        uses: docker/build-push-action@v5
        with:
          push: false
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_NAME }}-${{ steps.prep.outputs.safe_platform }}
          platforms: ${{ matrix.platform }}
          outputs: type=docker,dest=${{ env.IMAGE_NAME }}-docker-${{ steps.prep.outputs.safe_platform }}.tar
          context: .

      - name: Upload image tar
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-docker-${{ steps.prep.outputs.safe_platform }}.tar
          path: ${{ env.IMAGE_NAME }}-docker-${{ steps.prep.outputs.safe_platform }}.tar


  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          #  name                 CC                            CFLAGS                                                  LDFLAGS
          - [x64,                 gcc,                          "-O2 -Wall",                                            "-static"]
          - [armv5,               arm-linux-gnueabi-gcc,        "-O2 -Wall -march=armv5te -mfloat-abi=soft",            "-static"]
          - [armv6,               arm-linux-gnueabi-gcc,        "-O2 -Wall -march=armv6 -mfpu=vfp -mfloat-abi=softfp",  "-static"]
          - [armv7,               arm-linux-gnueabihf-gcc,      "-O2 -Wall -march=armv7-a -mfpu=vfp -mfloat-abi=hard",  "-static"]
          - [arm64,               aarch64-linux-gnu-gcc,        "-O2 -Wall",                                            "-static"]
          - [mipsel-mips1,        mipsel-linux-gnu-gcc,         "-O2 -Wall -march=mips1 -mabi=32 -mfp32",               "-static"]
          - [mipsel-mips32,       mipsel-linux-gnu-gcc,         "-O2 -Wall -march=mips32 -mabi=32",                     "-static"]
          - [mipsel-mips32r2,     mipsel-linux-gnu-gcc,         "-O2 -Wall -march=mips32r2 -mabi=32",                   "-static"]
          - [mips-mips1,          mips-linux-gnu-gcc,           "-O2 -Wall -march=mips1 -mabi=32 -mfp32",               "-static"]
          - [mips-mips32,         mips-linux-gnu-gcc,           "-O2 -Wall -march=mips32 -mabi=32",                     "-static"]
          - [mips-mips32r2,       mips-linux-gnu-gcc,           "-O2 -Wall -march=mips32r2 -mabi=32",                   "-static"]
          - [mips64el-mips64,     mips64el-linux-gnuabi64-gcc,  "-O2 -Wall -march=mips64 -mabi=64",                     "-static"]
          - [mips64el-mips64r2,   mips64el-linux-gnuabi64-gcc,  "-O2 -Wall -march=mips64r2 -mabi=64",                   "-static"]
          - [mips64-mips64,       mips64-linux-gnuabi64-gcc,    "-O2 -Wall -march=mips64 -mabi=64",                     "-static"]
          - [mips64-mips64r2,     mips64-linux-gnuabi64-gcc,    "-O2 -Wall -march=mips64r2 -mabi=64",                   "-static"]
          - [ppc64le,             powerpc64le-linux-gnu-gcc,    "-O2 -Wall",                                            "-static"]
          - [s390x,               s390x-linux-gnu-gcc,          "-O2 -Wall",                                            "-static"]
          - [riscv64,             riscv64-linux-gnu-gcc,        "-O2 -Wall",                                            "-static"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install toolchains
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-arm-linux-gnueabi \
            gcc-arm-linux-gnueabihf \
            gcc-aarch64-linux-gnu \
            gcc-mips-linux-gnu \
            gcc-mipsel-linux-gnu \
            gcc-mips64-linux-gnuabi64 \
            gcc-mips64el-linux-gnuabi64 \
            gcc-powerpc64le-linux-gnu \
            gcc-s390x-linux-gnu \
            gcc-riscv64-linux-gnu

      - name: Clean and build ${{ matrix.target[0] }}
        run: |
          make clean
          make all CC=${{ matrix.target[1] }} CFLAGS='${{ matrix.target[2] }}' LDFLAGS='${{ matrix.target[3] }}'

      - name: Prepare files
        run: |
          mkdir -p output
          cp LICENSE *.md ${{ env.IMAGE_NAME }} *.conf output/
    
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-linux-${{ matrix.target[0] }}.zip
          path: output/


  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: make clean all
        run: make clean all

      - name: Prepare files
        run: |
          mkdir -p output
          cp LICENSE *.md ${{ env.IMAGE_NAME }} *.conf output/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-macos.zip
          path: output/


  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            gcc
            git
            zip

      - name: Checkout
        uses: actions/checkout@v4

      - name: make clean all
        run: make clean all

      - name: Prepare files
        run: |
          mkdir -p output
          cp LICENSE *.md *.dll *.exe *.conf output/
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-windows-x64.zip
          path: output/

  upload-to-pages:
    needs:
      - build-docker
      - build-linux
      - build-macos
      - build-windows
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Install zip
        run: |
          sudo apt-get update
          sudo apt-get install -y zip

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Process docker images
        run: |
          for d in *.tar; do
            [ -d "$d" ] || continue
            mv "$d" "${d}-tmp"
            mv "${d}-tmp"/* .
            rm -rf "${d}-tmp"
          done

      - name: Process binaries
        run: |
          for d in *.zip; do
            [ -d "$d" ] || continue
            mv "$d" "wg-obfuscator"
            FN="${d%.*}.zip"
            zip -r9m "$FN" "wg-obfuscator"
          done

      - name: Generate index.html
        run: "(echo \"<html><head><title>WireGuard Obfuscator</title></head><body><h1>WireGuard Obfuscator</h1>This is automatic CI builds: binaries and Docker images. Install those builds only if you want to test some unreleased features. Can be buggy.<br/><br/>Updated: `date`<br/><br/>Binaries:<br/>\" ; for file in *.zip ; do echo \"<a href='$file'>$file</a><br/>\" ; done ; echo \"<br/>Docker images:<br/>\" ; for file in *.tar ; do echo \"<a href='$file'>$file</a><br/>\" ; done ; echo \"</body></html>\") > index.html"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
