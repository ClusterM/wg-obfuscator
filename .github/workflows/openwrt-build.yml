name: OpenWRT Build Test

on:
  push:
    branches: [ master ]
    paths:
      - 'openwrt/**'
      - '*.c'
      - '*.h'
      - 'Makefile'
  pull_request:
    branches: [ master ]
    paths:
      - 'openwrt/**'
      - '*.c'
      - '*.h'
      - 'Makefile'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  OPENWRT_VERSION: "23.05.5"

jobs:
  test-openwrt-build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        target:
          # Popular OpenWRT targets for testing
          # Format: [name, target, subtarget]
          - [x86_64, x86, 64]
          - [ramips_mt7621, ramips, mt7621]
          - [ath79_generic, ath79, generic]
          - [mediatek_filogic, mediatek, filogic]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          # Free up disk space on GitHub Actions runner
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get clean
          df -h

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            clang \
            flex \
            bison \
            g++ \
            gawk \
            gcc-multilib \
            g++-multilib \
            gettext \
            git \
            libncurses5-dev \
            libssl-dev \
            rsync \
            unzip \
            zlib1g-dev \
            file \
            wget \
            python3 \
            python3-setuptools \
            python3-dev \
            swig

      - name: Clone OpenWRT SDK
        run: |
          TARGET="${{ matrix.target[1] }}"
          SUBTARGET="${{ matrix.target[2] }}"
          
          echo "Downloading OpenWRT SDK for ${TARGET}/${SUBTARGET}..."
          
          # Use SDK instead of full source for faster builds
          SDK_URL="https://downloads.openwrt.org/releases/${OPENWRT_VERSION}/targets/${TARGET}/${SUBTARGET}/openwrt-sdk-${OPENWRT_VERSION}-${TARGET}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          
          wget -q "$SDK_URL" -O sdk.tar.xz || {
            echo "Failed to download SDK from $SDK_URL"
            echo "Trying alternative URL..."
            SDK_URL="https://downloads.openwrt.org/releases/${OPENWRT_VERSION}/targets/${TARGET}/${SUBTARGET}/openwrt-sdk-${TARGET}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
            wget -q "$SDK_URL" -O sdk.tar.xz
          }
          
          tar -xf sdk.tar.xz
          SDK_DIR=$(find . -maxdepth 1 -type d -name "openwrt-sdk-*" | head -1)
          echo "OPENWRT_DIR=$(realpath $SDK_DIR)" >> $GITHUB_ENV
          echo "OpenWRT SDK extracted successfully: $SDK_DIR"
          
          # Update feeds
          cd "$SDK_DIR"
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Prepare package for build
        run: |
          TARGET_NAME="${{ matrix.target[0] }}"
          
          echo "Preparing wg-obfuscator package for ${TARGET_NAME}..."
          
          # Copy our OpenWRT package to SDK
          mkdir -p "${OPENWRT_DIR}/package/network/wg-obfuscator"
          cp -r openwrt/Makefile "${OPENWRT_DIR}/package/network/wg-obfuscator/"
          cp -r openwrt/files "${OPENWRT_DIR}/package/network/wg-obfuscator/"
          
          # Copy LuCI app if present
          if [ -d "openwrt/luci-app-wg-obfuscator" ]; then
            cp -r openwrt/luci-app-wg-obfuscator "${OPENWRT_DIR}/package/network/wg-obfuscator/"
          fi
          
          echo "Package structure created:"
          ls -la "${OPENWRT_DIR}/package/network/wg-obfuscator/"

      - name: Configure OpenWRT build
        run: |
          cd "${OPENWRT_DIR}"
          
          echo "Configuring OpenWRT..."
          
          # Enable our package
          echo "CONFIG_PACKAGE_wg-obfuscator=y" >> .config
          
          # Update config
          make defconfig
          
          # Debug: Show configuration
          echo "=== Configuration ==="
          grep "CONFIG_PACKAGE_wg-obfuscator" .config || echo "Package not found in config!"
          echo "=== End Configuration ==="

      - name: Build OpenWRT package
        run: |
          TARGET_NAME="${{ matrix.target[0] }}"
          
          cd "${OPENWRT_DIR}"
          
          echo "Building wg-obfuscator package for ${TARGET_NAME}..."
          
          # Build only our package (install is not a separate target, .ipk is created during compile)
          make package/wg-obfuscator/{clean,download,prepare,compile} V=s CONFIG_PACKAGE_wg-obfuscator=y -j$(nproc) || {
            echo "Build failed, checking logs..."
            if [ -d "logs" ]; then
              find logs -name "*.log" -type f 2>/dev/null | head -5 | xargs tail -50 2>/dev/null || true
            fi
            echo "Checking build directory..."
            find build_dir -name "wg-obfuscator" -type f 2>/dev/null | head -5
            exit 1
          }
          
          echo "Build completed!"

      - name: Verify build artifacts
        run: |
          TARGET_NAME="${{ matrix.target[0] }}"
          
          cd "${OPENWRT_DIR}"
          
          echo "Verifying build artifacts for ${TARGET_NAME}..."
          
          # Find built package
          PKG_FILE=$(find bin/packages -name "wg-obfuscator*.ipk" -type f | head -1)
          
          if [ -n "$PKG_FILE" ]; then
            echo "✅ wg-obfuscator package built successfully"
            echo "Package: $PKG_FILE"
            ls -lh "$PKG_FILE"
            
            # Check package contents
            echo ""
            echo "Package contents:"
            tar -tzf "$PKG_FILE" | grep -E "(data\.tar\.gz|control\.tar\.gz|debian-binary)"
            
            echo ""
            echo "Files in package:"
            tar -xzOf "$PKG_FILE" ./data.tar.gz | tar -tz | head -20
            
            # Verify key files
            echo ""
            if tar -xzOf "$PKG_FILE" ./data.tar.gz | tar -tz | grep -q "usr/bin/wg-obfuscator"; then
              echo "✅ Binary file present in package"
            else
              echo "❌ Binary file missing from package"
              exit 1
            fi
            
            if tar -xzOf "$PKG_FILE" ./data.tar.gz | tar -tz | grep -q "etc/init.d/wg-obfuscator"; then
              echo "✅ Init script present in package"
            else
              echo "❌ Init script missing from package"
              exit 1
            fi
            
            if tar -xzOf "$PKG_FILE" ./data.tar.gz | tar -tz | grep -q "etc/config/wg-obfuscator"; then
              echo "✅ UCI config present in package"
            else
              echo "❌ UCI config missing from package"
              exit 1
            fi
            
          else
            echo "❌ wg-obfuscator package not found"
            echo "Checking build directory..."
            find build_dir -name "wg-obfuscator" -type f | head -5
            exit 1
          fi

      - name: Clean up
        if: always()
        run: |
          # Clean up to save space
          if [ -d "${OPENWRT_DIR}" ]; then
            rm -rf "${OPENWRT_DIR}/build_dir" "${OPENWRT_DIR}/staging_dir"
            echo "Cleanup completed"
          fi

  test-openwrt-syntax:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test shell script syntax
        run: |
          echo "Testing shell script syntax..."
          
          # Test main config generator
          bash -n openwrt/files/wg-obfuscator-config.sh
          echo "✅ wg-obfuscator-config.sh syntax OK"
          
          # Test init script
          bash -n openwrt/files/wg-obfuscator.init
          echo "✅ wg-obfuscator.init syntax OK"
          
          # Test build script
          bash -n openwrt/build-openwrt.sh
          echo "✅ build-openwrt.sh syntax OK"
          
          # Test LuCI defaults if present
          if [ -f "openwrt/luci-app-wg-obfuscator/root/etc/uci-defaults/luci-wg-obfuscator" ]; then
            bash -n openwrt/luci-app-wg-obfuscator/root/etc/uci-defaults/luci-wg-obfuscator
            echo "✅ luci-wg-obfuscator defaults syntax OK"
          fi

      - name: Test Lua syntax
        run: |
          echo "Testing Lua syntax..."
          
          sudo apt-get update -qq
          sudo apt-get install -y -qq lua5.1 > /dev/null
          
          # Test LuCI files if present (using luac -p for syntax check)
          if [ -f "openwrt/luci-app-wg-obfuscator/luasrc/controller/wg-obfuscator.lua" ]; then
            luac -p openwrt/luci-app-wg-obfuscator/luasrc/controller/wg-obfuscator.lua
            echo "✅ LuCI controller syntax OK"
          fi
          
          if [ -f "openwrt/luci-app-wg-obfuscator/luasrc/model/cbi/wg-obfuscator.lua" ]; then
            luac -p openwrt/luci-app-wg-obfuscator/luasrc/model/cbi/wg-obfuscator.lua
            echo "✅ LuCI model syntax OK"
          fi

      - name: Test Makefile structure
        run: |
          echo "Testing Makefile structure..."
          
          # Test main OpenWRT Makefile
          if grep -q "include.*rules.mk" openwrt/Makefile; then
            echo "✅ OpenWRT Makefile has correct structure"
          else
            echo "❌ OpenWRT Makefile missing required includes"
            exit 1
          fi
          
          # Check for PKG_SOURCE_PROTO
          if grep -q "PKG_SOURCE_PROTO:=git" openwrt/Makefile; then
            echo "✅ Makefile uses git source protocol"
          else
            echo "⚠️ Makefile doesn't use git source protocol"
          fi
          
          # Check for Build/Compile section
          if grep -q "define Build/Compile" openwrt/Makefile; then
            echo "✅ Makefile has Build/Compile section"
          else
            echo "❌ Makefile missing Build/Compile section"
            exit 1
          fi
          
          # Test LuCI Makefile if present
          if [ -f "openwrt/luci-app-wg-obfuscator/Makefile" ]; then
            if grep -q "include.*rules.mk" openwrt/luci-app-wg-obfuscator/Makefile; then
              echo "✅ LuCI Makefile has correct structure"
            else
              echo "❌ LuCI Makefile missing required includes"
              exit 1
            fi
          fi

      - name: Validate file permissions
        run: |
          echo "Validating file permissions..."
          
          # Check that scripts are executable
          for script in \
            "openwrt/files/wg-obfuscator-config.sh" \
            "openwrt/files/wg-obfuscator.init" \
            "openwrt/build-openwrt.sh"
          do
            if [ -x "$script" ]; then
              echo "✅ $(basename $script) is executable"
            else
              echo "❌ $(basename $script) is not executable"
              exit 1
            fi
          done
          
          # Check LuCI defaults if present
          if [ -f "openwrt/luci-app-wg-obfuscator/root/etc/uci-defaults/luci-wg-obfuscator" ]; then
            if [ -x "openwrt/luci-app-wg-obfuscator/root/etc/uci-defaults/luci-wg-obfuscator" ]; then
              echo "✅ luci-wg-obfuscator defaults is executable"
            else
              echo "❌ luci-wg-obfuscator defaults is not executable"
              exit 1
            fi
          fi

  test-openwrt-config-generation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test configuration generation (without UCI)
        run: |
          echo "Testing configuration file structure..."
          
          # Check that config files have correct structure
          if [ -f "openwrt/files/wg-obfuscator.config" ]; then
            echo "✅ UCI config file exists"
            cat openwrt/files/wg-obfuscator.config
          else
            echo "❌ UCI config file missing"
            exit 1
          fi
          
          if [ -f "openwrt/files/wg-obfuscator.conf" ]; then
            echo "✅ App config file exists"
            head -10 openwrt/files/wg-obfuscator.conf
          else
            echo "❌ App config file missing"
            exit 1
          fi

      - name: Test error handling in scripts
        run: |
          echo "Testing error handling..."
          
          # Test init script with dry-run
          if bash openwrt/files/wg-obfuscator.init help 2>&1 | grep -q "Usage"; then
            echo "✅ Init script shows usage"
          else
            echo "ℹ️ Init script doesn't show usage (might be OK)"
          fi
