name: OpenWRT Build Test

on:
  push:
    branches: [ master ]
    paths:
      - 'openwrt/**'
      - '*.c'
      - '*.h'
      - 'Makefile'
  pull_request:
    branches: [ master ]
    paths:
      - 'openwrt/**'
      - '*.c'
      - '*.h'
      - 'Makefile'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  OPENWRT_VERSION: "22.03.5"

jobs:
  test-openwrt-build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        target:
          # Popular OpenWRT targets for testing
          # Format: [target_name, arch, subtarget, profile]
          - [x86_64, x86_64, generic, Generic]
          - [mips_24kc, mips, 24kc, generic]
          - [arm_cortex-a7_neon-vfpv4, arm_cortex-a7, neon-vfpv4, generic]
          - [aarch64_cortex-a72, aarch64, cortex-a72, generic]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libncurses5-dev \
            zlib1g-dev \
            gawk \
            git \
            gettext \
            libssl-dev \
            xsltproc \
            wget \
            unzip \
            python3 \
            python3-dev \
            python3-pip \
            rsync

      - name: Clone OpenWRT
        run: |
          echo "Cloning OpenWRT repository..."
          git clone https://github.com/openwrt/openwrt.git openwrt-source
          cd openwrt-source
          git checkout v22.03.5
          echo "OPENWRT_DIR=$(pwd)" >> $GITHUB_ENV
          echo "OpenWRT cloned successfully"

      - name: Prepare package for build
        run: |
          TARGET_NAME="${{ matrix.target[0] }}"
          ARCH="${{ matrix.target[1] }}"
          SUBTARGET="${{ matrix.target[2] }}"
          
          echo "Preparing package for ${TARGET_NAME} (${ARCH}/${SUBTARGET})..."
          
          # Copy our OpenWRT package to OpenWRT source
          mkdir -p "${OPENWRT_DIR}/package/network/wg-obfuscator"
          cp -r openwrt/* "${OPENWRT_DIR}/package/network/wg-obfuscator/"
          
          # Copy only the OpenWRT package files (not source files)
          # OpenWRT will clone the git repository itself

      - name: Configure OpenWRT build
        run: |
          TARGET_NAME="${{ matrix.target[0] }}"
          ARCH="${{ matrix.target[1] }}"
          SUBTARGET="${{ matrix.target[2] }}"
          
          cd "${OPENWRT_DIR}"
          
          echo "Configuring OpenWRT for ${TARGET_NAME} (${ARCH}/${SUBTARGET})..."
          
          # Configure the build
          make defconfig
          
          # Set target and packages
          echo "CONFIG_TARGET_${ARCH}=y" >> .config
          echo "CONFIG_TARGET_${ARCH}_${SUBTARGET}=y" >> .config
          echo "CONFIG_TARGET_${ARCH}_${SUBTARGET}_Generic=y" >> .config
          
          # Enable our packages
          echo "CONFIG_PACKAGE_wg-obfuscator=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-wg-obfuscator=y" >> .config
          
          # Enable LuCI and dependencies
          echo "CONFIG_PACKAGE_luci=y" >> .config
          echo "CONFIG_PACKAGE_luci-base=y" >> .config
          echo "CONFIG_PACKAGE_luci-lib-base=y" >> .config
          echo "CONFIG_PACKAGE_luci-lib-ipkg=y" >> .config
          echo "CONFIG_PACKAGE_luci-lib-jsonc=y" >> .config
          echo "CONFIG_PACKAGE_luci-lib-nixio=y" >> .config
          echo "CONFIG_PACKAGE_luci-mod-admin-full=y" >> .config
          echo "CONFIG_PACKAGE_luci-mod-network=y" >> .config
          echo "CONFIG_PACKAGE_luci-mod-system=y" >> .config
          echo "CONFIG_PACKAGE_luci-proto-ipv6=y" >> .config
          echo "CONFIG_PACKAGE_luci-proto-ppp=y" >> .config
          echo "CONFIG_PACKAGE_luci-theme-bootstrap=y" >> .config
          
          # Enable required libraries to fix dependency warnings
          echo "CONFIG_PACKAGE_libpam=y" >> .config
          echo "CONFIG_PACKAGE_liblzma=y" >> .config
          echo "CONFIG_PACKAGE_libnetsnmp=y" >> .config
          echo "CONFIG_PACKAGE_libopenssl=y" >> .config
          echo "CONFIG_PACKAGE_libpthread=y" >> .config
          echo "CONFIG_PACKAGE_librt=y" >> .config
          echo "CONFIG_PACKAGE_libc=y" >> .config
          echo "CONFIG_PACKAGE_libgcc=y" >> .config
          echo "CONFIG_PACKAGE_libstdcpp=y" >> .config
          
          # Disable problematic packages that cause warnings
          echo "CONFIG_PACKAGE_busybox=n" >> .config
          echo "CONFIG_PACKAGE_kexec-tools=n" >> .config
          echo "CONFIG_PACKAGE_lldpd=n" >> .config
          echo "CONFIG_PACKAGE_policycoreutils=n" >> .config
          
          # Update config
          make defconfig

      - name: Build OpenWRT package
        run: |
          TARGET_NAME="${{ matrix.target[0] }}"
          ARCH="${{ matrix.target[1] }}"
          SUBTARGET="${{ matrix.target[2] }}"
          
          cd "${OPENWRT_DIR}"
          
          echo "Building OpenWRT package for ${TARGET_NAME}..."
          
          # First, build the toolchain (this is required)
          echo "Building toolchain..."
          make toolchain/compile -j$(nproc) || echo "Toolchain build failed, trying to continue..."
          
          # Build only our package without dependencies first
          echo "Building wg-obfuscator package (no dependencies)..."
          make package/wg-obfuscator/compile V=s -j$(nproc) IGNORE_ERRORS=1 || echo "Package build failed, checking what we have..."
          
          # Try to build LuCI app if it exists
          if [ -d "package/network/wg-obfuscator/luci-app-wg-obfuscator" ]; then
            echo "Building LuCI app (no dependencies)..."
            make package/luci-app-wg-obfuscator/compile V=s -j$(nproc) IGNORE_ERRORS=1 || echo "LuCI app build failed, but continuing..."
          fi
          
          # Show what we managed to build
          echo "Build completed. Checking results..."
          find . -name "*.ipk" -type f | head -10

      - name: Verify build artifacts
        run: |
          TARGET_NAME="${{ matrix.target[0] }}"
          ARCH="${{ matrix.target[1] }}"
          SUBTARGET="${{ matrix.target[2] }}"
          
          cd "${OPENWRT_DIR}"
          
          echo "Verifying build artifacts for ${TARGET_NAME}..."
          
          # Check if any packages were built
          echo "Looking for built packages..."
          find . -name "*.ipk" -type f | head -10
          
          # Check if the package was built successfully
          if find . -name "*wg-obfuscator*.ipk" -type f | grep -q .; then
            echo "✅ wg-obfuscator package built successfully"
            find . -name "*wg-obfuscator*.ipk" -type f | head -5
          else
            echo "❌ wg-obfuscator package not found"
            echo "Checking build logs..."
            if [ -f "logs/package.log" ]; then
              echo "Package build log:"
              tail -20 logs/package.log
            fi
            echo "Available packages:"
            find . -name "*.ipk" -type f | head -10
            echo "Build directory contents:"
            ls -la build_dir/ | head -10
            echo "Checking if source was compiled at least..."
            if find . -name "wg-obfuscator" -type f | grep -q .; then
              echo "✅ Binary was compiled successfully"
              find . -name "wg-obfuscator" -type f | head -5
            else
              echo "❌ Binary was not compiled"
              echo "This indicates a compilation error"
              exit 1
            fi
          fi
          
          # Check if LuCI app was built (if it exists)
          if find . -name "*luci-app-wg-obfuscator*.ipk" -type f | grep -q .; then
            echo "✅ luci-app-wg-obfuscator package built successfully"
            find . -name "*luci-app-wg-obfuscator*.ipk" -type f | head -5
          else
            echo "ℹ️ luci-app-wg-obfuscator package not found (may not exist or failed to build)"
          fi

      - name: Test package installation simulation
        run: |
          TARGET_NAME="${{ matrix.target[0] }}"
          ARCH="${{ matrix.target[1] }}"
          SUBTARGET="${{ matrix.target[2] }}"
          
          cd "${OPENWRT_DIR}"
          
          echo "Testing package installation simulation for ${TARGET_NAME}..."
          
          # Extract package info
          PKG_FILE=$(find . -name "*wg-obfuscator*.ipk" -type f | head -1)
          if [ -n "$PKG_FILE" ]; then
            echo "Package file: $PKG_FILE"
            
            # Check package contents
            tar -tzf "$PKG_FILE" | head -20
            echo "..."
            echo "Package contains $(tar -tzf "$PKG_FILE" | wc -l) files"
            
            # Verify key files are present
            if tar -tzf "$PKG_FILE" | grep -q "usr/bin/wg-obfuscator"; then
              echo "✅ Binary file present in package"
            else
              echo "❌ Binary file missing from package"
              echo "Package contents:"
              tar -tzf "$PKG_FILE" | grep -E "(usr/bin|etc/)" | head -10
              exit 1
            fi
            
            if tar -tzf "$PKG_FILE" | grep -q "etc/init.d/wg-obfuscator"; then
              echo "✅ Init script present in package"
            else
              echo "❌ Init script missing from package"
              echo "Package contents:"
              tar -tzf "$PKG_FILE" | grep -E "(usr/bin|etc/)" | head -10
              exit 1
            fi
            
            if tar -tzf "$PKG_FILE" | grep -q "etc/config/wg-obfuscator"; then
              echo "✅ UCI config present in package"
            else
              echo "❌ UCI config missing from package"
              echo "Package contents:"
              tar -tzf "$PKG_FILE" | grep -E "(usr/bin|etc/)" | head -10
              exit 1
            fi
          else
            echo "❌ No package file found for testing"
            echo "Available .ipk files:"
            find . -name "*.ipk" -type f | head -10
            exit 1
          fi

      - name: Clean up
        if: always()
        run: |
          # Clean up large files to save space
          if [ -d "${OPENWRT_DIR}" ]; then
            rm -rf "${OPENWRT_DIR}/dl" "${OPENWRT_DIR}/build_dir" "${OPENWRT_DIR}/staging_dir"
            echo "Cleanup completed"
          fi

  test-openwrt-syntax:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test shell script syntax
        run: |
          echo "Testing shell script syntax..."
          
          # Test main config generator
          bash -n openwrt/files/wg-obfuscator-config.sh
          echo "✅ wg-obfuscator-config.sh syntax OK"
          
          # Test init script
          bash -n openwrt/files/wg-obfuscator.init
          echo "✅ wg-obfuscator.init syntax OK"
          
          # Test LuCI defaults
          bash -n openwrt/luci-app-wg-obfuscator/root/etc/uci-defaults/luci-wg-obfuscator
          echo "✅ luci-wg-obfuscator defaults syntax OK"
          
          # Test build script
          bash -n openwrt/build-openwrt.sh
          echo "✅ build-openwrt.sh syntax OK"

      - name: Test Lua syntax
        run: |
          echo "Testing Lua syntax..."
          
          # Check if lua is available
          if command -v lua >/dev/null 2>&1; then
            lua -c openwrt/luci-app-wg-obfuscator/luasrc/controller/wg-obfuscator.lua
            echo "✅ LuCI controller syntax OK"
            
            lua -c openwrt/luci-app-wg-obfuscator/luasrc/model/cbi/wg-obfuscator.lua
            echo "✅ LuCI model syntax OK"
          else
            echo "ℹ️ Lua not available, skipping Lua syntax check"
          fi

      - name: Test Makefile syntax
        run: |
          echo "Testing Makefile syntax..."
          
          # Test main OpenWRT Makefile (skip actual make, just check basic syntax)
          echo "Checking OpenWRT Makefile structure..."
          if grep -q "include.*rules.mk" openwrt/Makefile; then
            echo "✅ OpenWRT Makefile has correct structure"
          else
            echo "❌ OpenWRT Makefile missing required includes"
            echo "Makefile content:"
            head -10 openwrt/Makefile
            exit 1
          fi
          
          # Test LuCI Makefile (skip actual make, just check basic syntax)
          echo "Checking LuCI Makefile structure..."
          if grep -q "include.*rules.mk" openwrt/luci-app-wg-obfuscator/Makefile; then
            echo "✅ LuCI Makefile has correct structure"
          else
            echo "❌ LuCI Makefile missing required includes"
            echo "LuCI Makefile content:"
            head -10 openwrt/luci-app-wg-obfuscator/Makefile
            exit 1
          fi

      - name: Validate file permissions
        run: |
          echo "Validating file permissions..."
          
          # Check that scripts are executable
          if [ -x "openwrt/files/wg-obfuscator-config.sh" ]; then
            echo "✅ wg-obfuscator-config.sh is executable"
          else
            echo "❌ wg-obfuscator-config.sh is not executable"
            exit 1
          fi
          
          if [ -x "openwrt/files/wg-obfuscator.init" ]; then
            echo "✅ wg-obfuscator.init is executable"
          else
            echo "❌ wg-obfuscator.init is not executable"
            exit 1
          fi
          
          if [ -x "openwrt/luci-app-wg-obfuscator/root/etc/uci-defaults/luci-wg-obfuscator" ]; then
            echo "✅ luci-wg-obfuscator defaults is executable"
          else
            echo "❌ luci-wg-obfuscator defaults is not executable"
            exit 1
          fi
          
          if [ -x "openwrt/build-openwrt.sh" ]; then
            echo "✅ build-openwrt.sh is executable"
          else
            echo "❌ build-openwrt.sh is not executable"
            exit 1
          fi

  test-openwrt-config-generation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install UCI utilities
        run: |
          # Install uci utilities for testing
          sudo apt-get update
          sudo apt-get install -y uci || sudo apt-get install -y libuci-dev || echo "UCI not available, skipping UCI tests"

      - name: Test configuration generation
        run: |
          echo "Testing configuration generation..."
          
          # Check if UCI is available
          if ! command -v uci >/dev/null 2>&1; then
            echo "ℹ️ UCI not available, skipping configuration generation test"
            exit 0
          fi
          
          # Create a test UCI configuration
          mkdir -p /tmp/test-uci
          export UCI_CONFIG_DIR=/tmp/test-uci
          
          # Create test UCI config
          cat > /tmp/test-uci/wg-obfuscator << 'EOF'
          config wg_obfuscator 'main'
          	option enabled '1'
          	option source_lport '13255'
          	option target 'test.example.com:13255'
          	option key 'test-key'
          	option source_if '0.0.0.0'
          	option masking 'AUTO'
          	option verbose 'INFO'
          	option max_clients '1024'
          	option idle_timeout '300'
          	option max_dummy_length_data '4'
          	option fwmark '0'
          	option static_bindings ''
          
          config wg_obfuscator 'instance2'
          	option enabled '0'
          	option source_lport '13256'
          	option target 'test2.example.com:13256'
          	option key 'test-key-2'
          	option source_if '0.0.0.0'
          	option masking 'STUN'
          	option verbose 'DEBUG'
          	option max_clients '512'
          	option idle_timeout '600'
          	option max_dummy_length_data '8'
          	option fwmark '0xdead'
          	option static_bindings '1.2.3.4:12883:6670,5.6.7.8:12083:6679'
          EOF
          
          # Test the config generator
          UCI_CONFIG="wg-obfuscator" UCI_CONFIG_DIR="/tmp/test-uci" openwrt/files/wg-obfuscator-config.sh
          
          # Check if config was generated
          if [ -f "/etc/wg-obfuscator/wg-obfuscator.conf" ]; then
            echo "✅ Configuration generated successfully"
            cat /etc/wg-obfuscator/wg-obfuscator.conf
          else
            echo "❌ Configuration generation failed"
            exit 1
          fi

      - name: Test error handling
        run: |
          echo "Testing error handling..."
          
          # Check if UCI is available
          if ! command -v uci >/dev/null 2>&1; then
            echo "ℹ️ UCI not available, skipping error handling test"
            exit 0
          fi
          
          # Test with no UCI config
          rm -rf /tmp/test-uci
          export UCI_CONFIG_DIR=/tmp/test-uci
          
          # This should fail
          if UCI_CONFIG="wg-obfuscator" UCI_CONFIG_DIR="/tmp/test-uci" openwrt/files/wg-obfuscator-config.sh; then
            echo "❌ Script should have failed with no UCI config"
            exit 1
          else
            echo "✅ Script correctly failed with no UCI config"
          fi