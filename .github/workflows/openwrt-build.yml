name: OpenWRT Build Test

on:
  push:
    branches: [ master ]
    paths:
      - 'openwrt/**'
      - '*.c'
      - '*.h'
      - 'Makefile'
  pull_request:
    branches: [ master ]
    paths:
      - 'openwrt/**'
      - '*.c'
      - '*.h'
      - 'Makefile'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  OPENWRT_VERSION: "23.05.3"
  OPENWRT_SDK_BASE: "https://downloads.openwrt.org/releases"

jobs:
  test-openwrt-build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        target:
          # Popular OpenWRT targets for testing
          # Format: [target_name, arch, subtarget, profile]
          - [x86_64, x86_64, generic, Generic]
          - [mips_24kc, mips, 24kc, generic]
          - [arm_cortex-a7_neon-vfpv4, arm_cortex-a7, neon-vfpv4, generic]
          - [aarch64_cortex-a72, aarch64, cortex-a72, generic]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libncurses5-dev \
            zlib1g-dev \
            gawk \
            git \
            gettext \
            libssl-dev \
            xsltproc \
            wget \
            unzip \
            python3 \
            python3-distutils

      - name: Download OpenWRT SDK
        run: |
          TARGET_NAME="${{ matrix.target[0] }}"
          ARCH="${{ matrix.target[1] }}"
          SUBTARGET="${{ matrix.target[2] }}"
          
          # Construct SDK URL with proper naming
          if [ "$ARCH" = "x86_64" ]; then
            SDK_ARCH="x86_64"
          elif [ "$ARCH" = "x86" ]; then
            SDK_ARCH="x86"
          elif [ "$ARCH" = "mips" ]; then
            SDK_ARCH="mips"
          elif [ "$ARCH" = "mipsel" ]; then
            SDK_ARCH="mipsel"
          elif [ "$ARCH" = "arm_cortex-a7" ]; then
            SDK_ARCH="arm_cortex-a7"
          elif [ "$ARCH" = "aarch64" ]; then
            SDK_ARCH="aarch64"
          else
            SDK_ARCH="$ARCH"
          fi
          
          SDK_URL="${OPENWRT_SDK_BASE}/${OPENWRT_VERSION}/targets/${SDK_ARCH}/${SUBTARGET}/openwrt-sdk-${OPENWRT_VERSION}-${SDK_ARCH}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          
          echo "Downloading OpenWRT SDK for ${TARGET_NAME}..."
          echo "Architecture: ${ARCH} -> ${SDK_ARCH}"
          echo "Subtarget: ${SUBTARGET}"
          echo "URL: ${SDK_URL}"
          
          # Try to download with error handling
          if wget -q --spider "${SDK_URL}"; then
            echo "SDK URL exists, downloading..."
            wget -q "${SDK_URL}" -O openwrt-sdk.tar.xz
            tar -xf openwrt-sdk.tar.xz
          else
            echo "SDK URL not found, trying alternative naming..."
            # Try alternative naming
            ALT_URL="${OPENWRT_SDK_BASE}/${OPENWRT_VERSION}/targets/${ARCH}/${SUBTARGET}/openwrt-sdk-${OPENWRT_VERSION}-${ARCH}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
            echo "Trying alternative URL: ${ALT_URL}"
            if wget -q --spider "${ALT_URL}"; then
              wget -q "${ALT_URL}" -O openwrt-sdk.tar.xz
              tar -xf openwrt-sdk.tar.xz
            else
              echo "❌ No valid SDK URL found for ${TARGET_NAME}"
              echo "Available targets can be checked at: ${OPENWRT_SDK_BASE}/${OPENWRT_VERSION}/targets/"
              exit 1
            fi
          fi
          
          # Find the extracted directory
          SDK_DIR=$(find . -maxdepth 1 -name "openwrt-sdk-*" -type d | head -1)
          if [ -z "$SDK_DIR" ]; then
            echo "❌ SDK directory not found after extraction"
            exit 1
          fi
          echo "SDK_DIR=${SDK_DIR}" >> $GITHUB_ENV
          echo "SDK_DIR=${SDK_DIR}"

      - name: Prepare package for build
        run: |
          # Copy our OpenWRT package to the SDK
          mkdir -p "${SDK_DIR}/package/network/wg-obfuscator"
          cp -r openwrt/* "${SDK_DIR}/package/network/wg-obfuscator/"
          
          # Copy source files to the SDK
          cp *.c *.h Makefile LICENSE README.md "${SDK_DIR}/package/network/wg-obfuscator/files/"
          
          # Create a simple Makefile for the source files
          cat > "${SDK_DIR}/package/network/wg-obfuscator/files/Makefile" << 'EOF'
          PROG_NAME    = wg-obfuscator
          CONFIG       = wg-obfuscator.conf
          SERVICE_FILE = wg-obfuscator.service
          HEADERS      = wg-obfuscator.h obfuscation.h config.h uthash.h mini_argp.h masking.h masking_stun.h
          
          RELEASE ?= 1
          
          RM    = rm -f
          CC    = gcc
          CFLAGS   = -O2 -Wall
          LDFLAGS += -s
          OBJS = wg-obfuscator.o config.o masking.o masking_stun.o
          EXEDIR = .
          
          EXTRA_CFLAGS =
          
          TARGET = $(EXEDIR)/$(PROG_NAME)
          
          all: $(TARGET)
          
          clean:
          	$(RM) *.o
          	$(RM) $(TARGET)
          
          $(OBJS): 
          
          %.o : %.c $(HEADERS)
          	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -o $@ -c $<
          
          $(TARGET): $(OBJS)
          	$(CC) -o $(TARGET) $(OBJS) $(LDFLAGS)
          
          .PHONY: clean
          EOF

      - name: Configure OpenWRT build
        run: |
          cd "${SDK_DIR}"
          
          # Configure the build
          make defconfig
          
          # Enable our package
          echo "CONFIG_PACKAGE_wg-obfuscator=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-wg-obfuscator=y" >> .config
          
          # Make sure dependencies are enabled
          echo "CONFIG_PACKAGE_luci=y" >> .config
          echo "CONFIG_PACKAGE_luci-base=y" >> .config
          
          # Update config
          make defconfig

      - name: Build OpenWRT package
        run: |
          cd "${SDK_DIR}"
          
          # Build only our package and its dependencies
          make package/wg-obfuscator/compile V=s
          
          # Also build LuCI app if it exists
          if [ -d "package/network/wg-obfuscator/luci-app-wg-obfuscator" ]; then
            make package/luci-app-wg-obfuscator/compile V=s || echo "LuCI app build failed, but continuing..."
          fi

      - name: Verify build artifacts
        run: |
          cd "${SDK_DIR}"
          
          # Check if the package was built successfully
          if [ -f "bin/packages/*/network/wg-obfuscator_*.ipk" ]; then
            echo "✅ wg-obfuscator package built successfully"
            ls -la bin/packages/*/network/wg-obfuscator_*.ipk
          else
            echo "❌ wg-obfuscator package not found"
            find bin -name "*wg-obfuscator*" -type f
            exit 1
          fi
          
          # Check if LuCI app was built (if it exists)
          if [ -f "bin/packages/*/luci/luci-app-wg-obfuscator_*.ipk" ]; then
            echo "✅ luci-app-wg-obfuscator package built successfully"
            ls -la bin/packages/*/luci/luci-app-wg-obfuscator_*.ipk
          else
            echo "ℹ️ luci-app-wg-obfuscator package not found (may not exist or failed to build)"
          fi

      - name: Test package installation simulation
        run: |
          cd "${SDK_DIR}"
          
          # Test that the package can be installed (simulation)
          echo "Testing package installation simulation..."
          
          # Extract package info
          PKG_FILE=$(find bin/packages -name "wg-obfuscator_*.ipk" | head -1)
          if [ -n "$PKG_FILE" ]; then
            echo "Package file: $PKG_FILE"
            
            # Check package contents
            tar -tzf "$PKG_FILE" | head -20
            echo "..."
            echo "Package contains $(tar -tzf "$PKG_FILE" | wc -l) files"
            
            # Verify key files are present
            if tar -tzf "$PKG_FILE" | grep -q "usr/bin/wg-obfuscator"; then
              echo "✅ Binary file present in package"
            else
              echo "❌ Binary file missing from package"
              exit 1
            fi
            
            if tar -tzf "$PKG_FILE" | grep -q "etc/init.d/wg-obfuscator"; then
              echo "✅ Init script present in package"
            else
              echo "❌ Init script missing from package"
              exit 1
            fi
            
            if tar -tzf "$PKG_FILE" | grep -q "etc/config/wg-obfuscator"; then
              echo "✅ UCI config present in package"
            else
              echo "❌ UCI config missing from package"
              exit 1
            fi
          else
            echo "❌ No package file found for testing"
            exit 1
          fi

      - name: Clean up
        if: always()
        run: |
          # Clean up large files to save space
          rm -rf "${SDK_DIR}/dl" "${SDK_DIR}/build_dir" "${SDK_DIR}/staging_dir"
          echo "Cleanup completed"

  test-openwrt-syntax:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test shell script syntax
        run: |
          echo "Testing shell script syntax..."
          
          # Test main config generator
          bash -n openwrt/files/wg-obfuscator-config.sh
          echo "✅ wg-obfuscator-config.sh syntax OK"
          
          # Test init script
          bash -n openwrt/files/wg-obfuscator.init
          echo "✅ wg-obfuscator.init syntax OK"
          
          # Test LuCI defaults
          bash -n openwrt/luci-app-wg-obfuscator/root/etc/uci-defaults/luci-wg-obfuscator
          echo "✅ luci-wg-obfuscator defaults syntax OK"
          
          # Test build script
          bash -n openwrt/build-openwrt.sh
          echo "✅ build-openwrt.sh syntax OK"

      - name: Test Makefile syntax
        run: |
          echo "Testing Makefile syntax..."
          
          # Test main OpenWRT Makefile
          make -n -f openwrt/Makefile
          echo "✅ OpenWRT Makefile syntax OK"
          
          # Test LuCI Makefile
          make -n -f openwrt/luci-app-wg-obfuscator/Makefile
          echo "✅ LuCI Makefile syntax OK"